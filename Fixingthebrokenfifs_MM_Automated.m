
brainstorm stop
clearvars

filedirs = uigetdir2;

for f = 1:length(filedirs)

    fiffile = dir([filedirs{f} '\*.fif']);
    filename = [fiffile(1).folder '\' fiffile(1).name];
    
    sfhfile = dir([filedirs{f} '\*.sfh']);
    sfhname = [sfhfile(1).folder '\' sfhfile(1).name];
    

filehdr = ft_read_header(filename);
filedata = ft_read_data(filename);
dataset = filename;
cfg = [];
cfg.dataset = dataset;
cfg.channel = 'MEGMAG';
data = ft_preprocessing(cfg);
data.hdr = filehdr;
data.trial{1,1} = filedata;
data.cfg.channel = filehdr.label;
data.label = filehdr.label;

%%
clear newdigs
sfhinfo = readtable(sfhname, 'FileType', 'text', 'HeaderLines', 1);
sfhinfo.Properties.VariableNames = {'SensorLabel' 'x_coord' 'y_coord' 'z_coord' 'oldkind' 'color_r' 'color_g' 'color_b'};

fid_count = 1;
hpi_count = 1;
sfc_count = 1;

for i = 1:height(sfhinfo)
    
    if startsWith(sfhinfo.SensorLabel{i}, 'Fid_')
        newdigs(i).kind = 1;
        newdigs(i).ident = fid_count;
        fid_count = fid_count+1;
    elseif startsWith(sfhinfo.SensorLabel{i}, 'HPI_')
        newdigs(i).kind = 2;
        newdigs(i).ident = hpi_count;
        hpi_count = hpi_count+1;
    elseif startsWith(sfhinfo.SensorLabel{i}, 'SfcExtra_')
        newdigs(i).kind = 4;   
        newdigs(i).ident = sfc_count;
        sfc_count = sfc_count+1;
    else end
    
    newdigs(i).r = [[sfhinfo.x_coord(i) ./ 1000]; [sfhinfo.y_coord(i) ./ 1000]; [sfhinfo.z_coord(i) ./ 1000]];
    newdigs(i).coord_frame = 4;
end


%%

filehdr.orig.dig = newdigs;

%%
%change filehdr to real dig points from sfh
data.hdr = filehdr;
fieldtrip2fiff([filename(1:end-4) '_fixedheader.fif'], data);


clearvars -except filedirs f
end

%%
 clear f
brainstorm

for f = 1:length(filedirs)
    
    
    fiffile = dir([filedirs{f} '\*_fixedheader.fif']);
    ursi = fiffile.folder(end-10:end);
    filename = [fiffile(1).folder '\' fiffile(1).name];
    
% Script generated by Brainstorm (01-Nov-2024)

% Input files
sFiles = [];
SubjectNames = {...
    ['z_' ursi '_fixedHeadPoints']};
RawFiles = {...
     filename };

% Start a new report
bst_report('Start', sFiles);

% Process: Create link to raw file
sFiles = bst_process('CallProcess', 'process_import_data_raw', sFiles, [], ...
    'subjectname',    SubjectNames{1}, ...
    'datafile',       {RawFiles{1}, 'FIF'}, ...
    'channelreplace', 1, ...
    'channelalign',   1, ...
    'evtmode',        'value');

% Save and display report
ReportFile = bst_report('Save', sFiles);
bst_report('Open', ReportFile);
% bst_report('Export', ReportFile, ExportDir);
% bst_report('Email', ReportFile, username, to, subject, isFullReport);

% Delete temporary files
% gui_brainstorm('EmptyTempFolder');



end

%%

brainstorm stop



bs_dir = uigetdir('', 'select brainstorm directory');

for f = 1:length(filedirs)
    fiffile = dir([filedirs{f} '\*_fixedheader.fif']);
    ursi = fiffile.folder(end-10:end);

    bs_orig_folder  = struct2table(dir([bs_dir '\data\' ursi '\*_notch_band']));
    bs_orig_folder(contains(bs_orig_folder.name, '@raw') , :) = [];
    
    bs_fixed_folder = struct2table(dir([bs_dir '\data\z_' ursi '_fixedHeadPoints\@raw*_fixedheader']));
    
    fixed_mat_file =  [bs_fixed_folder.folder '\' bs_fixed_folder.name '\channel_vectorview306_acc1.mat'];
    orig_mat_file  =  [bs_orig_folder.folder{1} '\' bs_orig_folder.name{1} '\channel_vectorview306_acc1.mat'];

    mkdir( [bs_orig_folder.folder{1} '\' bs_orig_folder.name{1} '\archive'] )
    movefile(orig_mat_file, [bs_orig_folder.folder{1} '\' bs_orig_folder.name{1} '\archive'])
    copyfile(fixed_mat_file,  [bs_orig_folder.folder{1} '\' bs_orig_folder.name{1} '\']);
    
    clear fiffile ursi bs_*_folder *_file

end


%%
brainstorm